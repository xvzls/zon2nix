const root = @import("root.zig");
const std = @import("std");

const Entry = std.StringHashMap(root.Dependency).Entry;

fn lessThan(_: void, lhs: Entry, rhs: Entry) bool {
	return std.mem.order(
		u8,
		lhs.key_ptr.*,
		rhs.key_ptr.*,
	) == .lt;
}

pub fn write(
	allocator: std.mem.Allocator,
	sha512_checksum: []const u8,
	manifest: *const root.Manifest,
	out: anytype,
) !void {
	const indent = "\t";
	
	try out.print(
		\\# Generated by a zon2nix fork
		\\# repo: (https://github.com/xvzls/zon2nix)
		\\
		\\{{ linkFarm, fetchzip }}:
		\\{{
		\\{[i]s}# A sha512 checksum of the contents of
		\\{[i]s}# build.zig.zon
		\\{[i]s}checksum = "{[checksum]s}";
		\\{[i]s}
		\\{[i]s}name = "{[name]s}";
		\\{[i]s}version = "{[version]s}";
		\\{[i]s}dependencies = linkFarm "zig-packages" [
		\\
		,
		.{
			.i = indent,
			
			.checksum = sha512_checksum,
			.name = manifest.name.items,
			.version = manifest.version.items,
		}
	);
	
	const len = manifest.dependencies.count();
	var entries = try allocator.alloc(Entry, len);
	defer allocator.free(entries);
	
	var iter = manifest.dependencies.iterator();
	for (0..len) |i| {
		entries[i] = iter.next().?;
	}
	std.mem.sortUnstable(Entry, entries, {}, lessThan);
	
	for (entries) |entry| {
		const key = entry.key_ptr.*;
		const dep = entry.value_ptr.*;
		try out.print(
			\\{[i]s}{[i]s}{{
			\\{[i]s}{[i]s}{[i]s}name = "{[name]s}";
			\\{[i]s}{[i]s}{[i]s}path = fetchzip {{
			\\{[i]s}{[i]s}{[i]s}{[i]s}url = "{[url]s}";
			\\{[i]s}{[i]s}{[i]s}{[i]s}hash = "{[hash]s}";
			\\{[i]s}{[i]s}{[i]s}}};
			\\{[i]s}{[i]s}}}
			\\
		, .{
			.i = indent,
			
			.name = key,
			.url = dep.url,
			.hash = dep.nix_hash.?,
		});
	}
	
	try out.print(
		\\{[i]s}];
		\\}}
		\\
	, .{
		.i = indent,
	});
}

