const std = @import("std");

const Dependency = @import("Dependency.zig");
const Entry = std.StringHashMap(Dependency).Entry;

fn lessThan(_: void, lhs: Entry, rhs: Entry) bool {
	return std.mem.order(
		u8,
		lhs.key_ptr.*,
		rhs.key_ptr.*,
	) == .lt;
}

pub fn write(
	allocator: std.mem.Allocator,
	deps: std.StringHashMap(Dependency),
	out: anytype,
) !void {
	try out.writeAll(
		\\# generated by zon2nix (https://github.com/nix-community/zon2nix)
		\\
		\\{ linkFarm, fetchzip }:
		\\
		\\linkFarm "zig-packages" [
		\\
	);
	
	const len = deps.count();
	var entries = try allocator.alloc(Entry, len);
	var iter = deps.iterator();
	for (0..len) |i| {
		entries[i] = iter.next().?;
	}
	std.mem.sortUnstable(Entry, entries, {}, lessThan);
	
	for (entries) |entry| {
		const key = entry.key_ptr.*;
		const dep = entry.value_ptr.*;
		try out.print(
			\\  {{
			\\    name = "{[name]s}";
			\\    path = fetchzip {{
			\\      url = "{[url]s}";
			\\      hash = "{[hash]s}";
			\\    }};
			\\  }}
			\\
		, .{
			.name = key,
			.url = dep.url,
			.hash = dep.nix_hash,
		});
	}
	
	try out.writeAll("]\n");
}

