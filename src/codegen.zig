const root = @import("root");
const std = @import("std");

const Entry = std.StringHashMap(root.Dependency).Entry;

fn lessThan(_: void, lhs: Entry, rhs: Entry) bool {
	return std.mem.order(
		u8,
		lhs.key_ptr.*,
		rhs.key_ptr.*,
	) == .lt;
}

pub fn write(
	allocator: std.mem.Allocator,
	sha512_checksum: []const u8,
	deps: *const std.StringHashMap(root.Dependency),
	out: anytype,
) !void {
	try out.print(
		\\# Generated by a zon2nix fork
		\\# repo: (https://github.com/xvzls/zon2nix)
		\\
		\\{{ linkFarm, fetchzip }}:
		\\{{
		\\  sha512-checksum = "{[sha512_checksum]s}";
		\\  link-farm = linkFarm "zig-packages" [
		\\
		,
		.{
			.sha512_checksum = sha512_checksum,
		}
	);
	
	const len = deps.count();
	var entries = try allocator.alloc(Entry, len);
	defer allocator.free(entries);
	
	var iter = deps.iterator();
	for (0..len) |i| {
		entries[i] = iter.next().?;
	}
	std.mem.sortUnstable(Entry, entries, {}, lessThan);
	
	for (entries) |entry| {
		const key = entry.key_ptr.*;
		const dep = entry.value_ptr.*;
		try out.print(
			\\    {{
			\\      name = "{[name]s}";
			\\      path = fetchzip {{
			\\        url = "{[url]s}";
			\\        hash = "{[hash]s}";
			\\      }};
			\\    }}
			\\
		, .{
			.name = key,
			.url = dep.url,
			.hash = dep.nix_hash.?,
		});
	}
	
	try out.writeAll(
		\\  ];
		\\}
		\\
	);
}

